// Copyright (c) Open Enclave SDK contributors.
// Licensed under the MIT License.

#include <openenclave/internal/tests.h>
#include <openssl/e_os2.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "CSchema_checker.h"
#include "include_openssl.h"
#include "openssl_schema.h"
#include "openssl_sgx_tcrypto_compat_u.h"

t_openssl_schema _openssl_digest[] = {
    //  api id, #params, { length of each param }, { type of each param}
    {"SHA1_init",
     e_sha1_init,
     1,
     {sizeof(SHA_CTX), _Neg, _Neg, _Neg, _Neg, _Neg, _Neg, _Neg, _Neg},
     {S_FIXLEN_IO | S_RAND, 0, 0, 0, 0, 0, 0, 0, 0}},
    {"SHA1_update",
     e_sha1_update,
     3,
     {sizeof(SHA_CTX),
      _Neg,
      sizeof(size_t),
      _Neg,
      _Neg,
      _Neg,
      _Neg,
      _Neg,
      _Neg},
     {S_FIXLEN_IO | S_RAND, S_VARLEN_I | S_RAND, S_LEN, 0, 0, 0, 0, 0, 0}},
    {"SHA1_final",
     e_sha1_final,
     4,
     {sizeof(SHA_CTX),
      _Neg,
      sizeof(size_t),
      SHA_DIGEST_LENGTH,
      _Neg,
      _Neg,
      _Neg,
      _Neg,
      _Neg},
     {S_FIXLEN_IO | S_RAND,
      S_VARLEN_I | S_RAND,
      S_LEN,
      S_FIXLEN_IO | S_RAND,
      0,
      0,
      0,
      0,
      0}},

    {"SHA256_init",
     e_sha256_init,
     1,
     {sizeof(SHA256_CTX), _Neg, _Neg, _Neg, _Neg, _Neg, _Neg, _Neg, _Neg},
     {S_FIXLEN_IO | S_RAND, 0, 0, 0, 0, 0, 0, 0, 0}},
    {"SHA256_update",
     e_sha256_update,
     3,
     {sizeof(SHA256_CTX),
      _Neg,
      sizeof(size_t),
      _Neg,
      _Neg,
      _Neg,
      _Neg,
      _Neg,
      _Neg},
     {S_FIXLEN_IO | S_RAND, S_VARLEN_I | S_RAND, S_LEN, 0, 0, 0, 0, 0, 0}},
    {"SHA256_final",
     e_sha256_final,
     4,
     {sizeof(SHA256_CTX),
      _Neg,
      sizeof(size_t),
      SHA256_DIGEST_LENGTH,
      _Neg,
      _Neg,
      _Neg,
      _Neg,
      _Neg},
     {S_FIXLEN_IO | S_RAND,
      S_VARLEN_I | S_RAND,
      S_LEN,
      S_FIXLEN_IO | S_RAND,
      0,
      0,
      0,
      0,
      0}},

    {"EVP_Sha256",
     e_EVP_Sha256,
     1,
     {sizeof(EVP_MD), _Neg, _Neg, _Neg, _Neg},
     {S_FIXLEN_IO | S_RAND | S_CMP_EVP_MD, 0, 0, 0, 0}},
    {"EVP_Sha384",
     e_EVP_Sha384,
     1,
     {sizeof(EVP_MD), _Neg, _Neg, _Neg, _Neg},
     {S_FIXLEN_IO | S_RAND | S_CMP_EVP_MD, 0, 0, 0, 0}},
    {"EVP_MD_CTX_init",
     e_EVP_MD_CTX_init,
     1,
     {sizeof(EVP_MD_CTX), _Neg, _Neg, _Neg, _Neg},
     {S_FIXLEN_IO | S_RAND, 0, 0, 0, 0}},
    {"EVP_SignInit_ex",
     e_EVP_SignInit_ex,
     2,
     {sizeof(EVP_MD_CTX), sizeof(EVP_MD), _Neg, _Neg, _Neg},
     {S_FIXLEN_IO | S_RAND | S_CMP_EVP_MD_CTX,
      S_FIXLEN_IO | S_RAND | S_CMP_EVP_MD,
      0,
      0,
      0}},
    {"EVP_SignUpdate",
     e_EVP_SignUpdate,
     4,
     {sizeof(EVP_MD_CTX), _Neg, sizeof(size_t), sizeof(EVP_MD), _Neg},
     {S_FIXLEN_IO | S_RAND | S_CMP_EVP_MD_CTX,
      S_VARLEN_I | S_RAND,
      S_LEN,
      S_FIXLEN_IO | S_RAND | S_CMP_EVP_MD,
      0}},
    {"EVP_SignFinal",
     e_EVP_SignFinal,
     5,
     {sizeof(EVP_MD_CTX),
      sizeof(EVP_PKEY),
      sizeof(size_t),
      sizeof(EVP_PKEY),
      sizeof(EVP_MD)},
     {S_FIXLEN_IO | S_RAND | S_CMP_EVP_MD_CTX,
      S_FIXLEN_O | S_RAND,
      S_FIXLEN_O | S_RAND,
      S_FIXLEN_IO | S_RAND,
      S_FIXLEN_IO | S_RAND | S_CMP_EVP_MD}},

    {"EVP_VerifyInit_ex",
     e_EVP_VerifyInit_ex,
     2,
     {sizeof(EVP_MD_CTX), sizeof(EVP_MD), _Neg, _Neg, _Neg},
     {S_FIXLEN_IO | S_RAND | S_CMP_EVP_MD_CTX,
      S_FIXLEN_IO | S_RAND | S_CMP_EVP_MD,
      0,
      0,
      0}},
    {"EVP_VerifyUpdate",
     e_EVP_VerifyUpdate,
     4,
     {sizeof(EVP_MD_CTX), _Neg, sizeof(unsigned int), sizeof(EVP_MD), _Neg},
     {S_FIXLEN_IO | S_RAND | S_CMP_EVP_MD_CTX,
      S_VARLEN_I | S_RAND,
      S_LEN,
      S_FIXLEN_IO | S_RAND | S_CMP_EVP_MD,
      0}},
    {"EVP_VerifyFinal",
     e_EVP_VerifyFinal,
     5,
     {sizeof(EVP_MD_CTX),
      _ELLEPH,
      sizeof(unsigned int),
      sizeof(EVP_PKEY),
      sizeof(EVP_MD)},
     {S_FIXLEN_IO | S_RAND | S_CMP_EVP_MD_CTX,
      S_FIXLEN_O | S_RAND,
      S_FIXLEN_O | S_RAND,
      S_FIXLEN_IO | S_RAND,
      S_FIXLEN_IO | S_RAND | S_CMP_EVP_MD}},

    {"PKCS7_sign",
     e_PKCS7_sign,
     3,
     {_Neg, sizeof(size_t), _Neg, sizeof(size_t), _Neg},
     {S_VARLEN_I | S_RAND, S_LEN, S_VARLEN_O, 0, 0}},
    {"PKCS7_get_signer_info",
     e_PKCS7_get_signer_info,
     3,
     {_Neg, sizeof(size_t), _ELLEPH, _Neg, _Neg},
     {S_VARLEN_I | S_RAND, S_LEN, S_FIXLEN_O, 0, 0}},
    {"PKCS7_verify",
     e_PKCS7_verify,
     2,
     {_Neg, sizeof(size_t), _Neg, _Neg, _Neg},
     {S_VARLEN_I | S_RAND, S_LEN, 0, 0, 0}},

    {"EVP_MD_CTX_create",
     e_EVP_MD_CTX_create,
     0,
     {_Neg, _Neg, _Neg, _Neg, _Neg},
     {0, 0, 0, 0, 0}},
    {"EVP_MD_CTX_destroy",
     e_EVP_MD_CTX_destroy,
     0,
     {_Neg, _Neg, _Neg, _Neg, _Neg},
     {0, 0, 0, 0, 0}},

    {"SSLeay_version",
     e_SSLeay_version,
     2,
     {sizeof(int), _ELLEPH, _Neg, _Neg, _Neg},
     {S_FIXLEN_IO | S_RAND, S_FIXLEN_O, 0, 0, 0}},

    {"EVP_EncodeInit",
     e_EVP_EncodeInit,
     1,
     {sizeof(EVP_ENCODE_CTX), _Neg, _Neg, _Neg, _Neg, _Neg, _Neg, _Neg, _Neg},
     {S_FIXLEN_IO | S_RAND, 0, 0, 0, 0, 0, 0, 0, 0}},
    {"EVP_EncodeUpdate",
     e_EVP_EncodeUpdate,
     5,
     {sizeof(EVP_ENCODE_CTX),
      _Neg,
      sizeof(size_t),
      _Neg,
      sizeof(size_t),
      _Neg,
      _Neg,
      _Neg,
      _Neg},
     {S_FIXLEN_IO | S_RAND,
      S_VARLEN_I | S_RAND,
      S_LEN,
      S_VARLEN_I | S_RAND,
      S_FIXLEN_IO,
      0,
      0,
      0,
      0}},
    {"EVP_DecodeInit",
     e_EVP_DecodeInit,
     1,
     {sizeof(EVP_ENCODE_CTX), _Neg, _Neg, _Neg, _Neg, _Neg, _Neg, _Neg, _Neg},
     {S_FIXLEN_IO | S_RAND, 0, 0, 0, 0, 0, 0, 0, 0}},
    {"EVP_DecodeUpdate",
     e_EVP_DecodeUpdate,
     5,
     {sizeof(EVP_ENCODE_CTX),
      _Neg,
      sizeof(size_t),
      _Neg,
      sizeof(size_t),
      _Neg,
      _Neg,
      _Neg,
      _Neg},
     {S_FIXLEN_IO | S_RAND,
      S_VARLEN_I | S_RAND,
      S_LEN,
      S_VARLEN_I | S_RAND,
      S_FIXLEN_IO,
      0,
      0,
      0,
      0}},
    {"EVP_DecodeFinal",
     e_EVP_DecodeFinal,
     5,
     {sizeof(EVP_ENCODE_CTX),
      _Neg,
      sizeof(size_t),
      _Neg,
      sizeof(size_t),
      _Neg,
      _Neg,
      _Neg,
      _Neg},
     {S_FIXLEN_IO | S_RAND,
      S_VARLEN_I | S_RAND,
      S_LEN,
      S_VARLEN_I | S_RAND,
      S_FIXLEN_IO,
      0,
      0,
      0,
      0}},

    {"EVP_DigestInit_ex",
     e_EVP_DigestInit_ex,
     1,
     {sizeof(EVP_MD_CTX), _Neg, _Neg, _Neg, _Neg},
     {S_FIXLEN_IO | S_RAND | S_CMP_EVP_MD_CTX, 0, 0, 0, 0}},
    {"EVP_DigestUpdate",
     e_EVP_DigestUpdate,
     3,
     {sizeof(EVP_MD_CTX), _Neg, sizeof(size_t), _Neg, _Neg},
     {S_FIXLEN_IO | S_RAND | S_CMP_EVP_MD_CTX,
      S_VARLEN_I | S_RAND,
      S_LEN,
      0,
      0}},
    {"EVP_DigestFinal_ex",
     e_EVP_DigestFinal_ex,
     3,
     {sizeof(EVP_MD_CTX), EVP_MAX_MD_SIZE, sizeof(unsigned int), _Neg, _Neg},
     {S_FIXLEN_IO | S_RAND | S_CMP_EVP_MD_CTX,
      S_FIXLEN_IO | S_RAND,
      S_FIXLEN_IO | S_RAND,
      0,
      0}},

};

class CSchemaChecker_Digest : public CSchemaChecker
{
  public:
    CSchemaChecker_Digest(t_openssl_schema* schema, uint schema_size)
        : CSchemaChecker(schema, schema_size)
    {
    }
};

oe_result_t schema_test_digest(oe_enclave_t* enclave)
{
    oe_result_t result;
    int retval;
    uint api_count = OE_COUNTOF(_openssl_digest);
    t_openssl_schema* schema = _openssl_digest;
    CSchemaChecker_Digest* checker =
        new CSchemaChecker_Digest(schema, api_count);
    printf("total test number: %u\n", api_count);

    for (int i = 0; i < (int)api_count; i++)
    {
        checker->SetupParams((schema + i)->id, (uint32_t)i);
        printf("Test case: %s\tstarts \n", (schema + i)->api_name);
        result =
            ecall_schema_run_digest_tests(enclave, &retval, &(checker->m_p1));
        OE_TEST(result == OE_OK);
        OE_TEST(retval >= 0);
        printf("Test case: %s\tends \n", (schema + i)->api_name);
    }
    return OE_OK;
}
